import os
from math import log10
import multiprocessing
from typing import Tuple, List, Dict, Optional
from tqdm import tqdm
import numpy as np

import geopandas as gpd
from pandas import Series
from geopandas import GeoDataFrame, sjoin
from shapely.geometry import Point, LineString
from shapely.ops import nearest_points
from core.geom_transform import check_geomtype
from config import (
    noise_level_column,
    building_level_column,
    amount_of_reflections
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
MAX_WORKERS = min(os.cpu_count() or 4,
                  32)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ workers
CHUNKSIZE = 250  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞–≥—Ä—É–∑–∫–∏


def process_chunk(args: Tuple[gpd.GeoDataFrame, gpd.GeoDataFrame, str]) -> \
Tuple[List[Dict], List[Dict]]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    chunk, barriers, crs = args
    lines_results = []
    barriers_results = []

    for _, row in chunk.iterrows():
        line, barriers_list = process_noize_line(row, barriers, crs)
        lines_results.append(line.to_dict())
        barriers_results.extend(barriers_list)

    return lines_results, barriers_results


def process_noize_line(noize_line: Series, barriers: GeoDataFrame, crs: str) -> \
Tuple[Series, List[Dict]]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –ª–∏–Ω–∏–∏ —à—É–º–∞ —Å –±–∞—Ä—å–µ—Ä–∞–º–∏ –¥–ª—è –æ—Ç—Ä–∞–∂–µ–Ω–∏–π"""
    inter_barriers = []
    intersect_barrier = get_intersect_barrier(noize_line, barriers, crs)

    if intersect_barrier.empty:
        return noize_line, inter_barriers

    closest_line = find_near_line(noize_line.geometry, intersect_barrier)

    for _ in range(amount_of_reflections):
        if closest_line is None or intersect_barrier.empty:
            break

        noize_line, barrier = get_line_reflect(noize_line, closest_line)
        if barrier is None:
            break

        inter_barriers.append(barrier.to_dict())
        intersect_barrier = get_intersect_barrier(noize_line, barriers, crs)
        closest_line = find_near_line(noize_line.geometry, intersect_barrier)

    return noize_line, inter_barriers


def make_noise_reflection(noize: gpd.GeoDataFrame,
                          barriers: gpd.GeoDataFrame) -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    print(f'üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å {MAX_WORKERS} —è–¥—Ä–∞–º–∏')

    # –°–æ–∑–¥–∞–µ–º spatial index –¥–ª—è –±–∞—Ä—å–µ—Ä–æ–≤ –æ–¥–∏–Ω —Ä–∞–∑
    # if not barriers.sindex.is_valid:
    #     barriers.sindex

    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —á–∞–Ω–∫–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    chunks = np.array_split(noize,
                            max(len(noize) // CHUNKSIZE, MAX_WORKERS * 2))
    args = [(chunk, barriers, noize.crs) for chunk in chunks]

    total_chunks = len(chunks)
    lines_results = []
    barriers_results = []

    with multiprocessing.Pool(processes=MAX_WORKERS) as pool:
        with tqdm(total=total_chunks, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–æ–≤",
                  unit="chunk") as pbar:
            for chunk_lines, chunk_barriers in pool.imap_unordered(
                    process_chunk, args):
                lines_results.extend(chunk_lines)
                barriers_results.extend(chunk_barriers)
                pbar.update(1)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if barriers_results:
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        GeoDataFrame(lines_results, crs=noize.crs).to_file('reflect.gpkg',
                                                           driver='GPKG')
        inter_barriers_gdf = gpd.GeoDataFrame(barriers_results,
                                              geometry='geometry',
                                              crs=barriers.crs)
        inter_barriers_gdf.to_file('barrier_noise_before_agr_2.gpkg',
                                   driver='GPKG')
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è
        result = inter_barriers_gdf.groupby(['geometry', 'et'],
                                            as_index=False).agg(
            maximum=('noise_level', 'max')
        )

        gpd.GeoDataFrame(result, geometry='geometry',
                         crs=barriers.crs).to_file(
            'barrier_noise.gpkg', driver='GPKG'
        )
    print("‚úÖ –ì–æ—Ç–æ–≤–æ!")


def get_intersect_barrier(noize_line: Series, barriers: GeoDataFrame,
                          crs: str) -> GeoDataFrame:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö—Å—è –±–∞—Ä—å–µ—Ä–æ–≤"""
    # –ë—ã—Å—Ç—Ä—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é –∑–¥–∞–Ω–∏—è
    mask = barriers[building_level_column] == (
                noize_line[noise_level_column] / 3)
    filtered = barriers[mask]

    if filtered.empty:
        return filtered

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º spatial index –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
    geom = noize_line.geometry
    possible_matches_index = list(filtered.sindex.intersection(geom.bounds))
    possible_matches = filtered.iloc[possible_matches_index]

    return possible_matches[possible_matches.intersects(geom)]


def find_near_line(line: LineString, target_lines: GeoDataFrame) -> Optional[
    Series]:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–π –ª–∏–Ω–∏–∏"""
    if not check_geomtype(target_lines, 'LineString'):
        raise ValueError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –≥–µ–æ–º–µ—Ç—Ä–∏–∏: –æ–∂–∏–¥–∞–ª—Å—è LineString')

    first_noise_point = Point(line.coords[-2])
    min_distance = float('inf')
    closest_line = None

    for _, target_line in target_lines.iterrows():
        intersection = line.intersection(target_line.geometry)
        if intersection.is_empty:
            continue

        distance = first_noise_point.distance(intersection)

        if 0.1 <= distance < min_distance:
            min_distance = distance
            closest_line = target_line

    return closest_line


def get_line_reflect(noise: Series, barrier: Series) -> Tuple[
    Optional[Series], Optional[Series]]:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ä–∞—Å—á–µ—Ç–∞ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è"""
    noise_geom = noise.geometry
    barrier_geom = barrier.geometry

    # –°–æ–∑–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç –ª–∏–Ω–∏–∏
    last_segment = LineString([noise_geom.coords[-2], noise_geom.coords[-1]])
    intersection = last_segment.intersection(barrier_geom)

    if intersection.is_empty or not isinstance(intersection, Point):
        return noise, None

    # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ
    x1, y1 = barrier_geom.coords[0]
    x2, y2 = barrier_geom.coords[1]
    dx, dy = x2 - x1, y2 - y1

    # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
    if dx == 0:
        reflected_x = 2 * x1 - noise_geom.coords[-1][0]
        reflected_y = noise_geom.coords[-1][1]
    else:
        m = dy / dx
        c = y1 - m * x1
        x, y = noise_geom.coords[-1]
        d = (x + (y - c) * m) / (1 + m ** 2)
        reflected_x = 2 * d - x
        reflected_y = 2 * d * m - y + 2 * c

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥–µ–æ–º–µ—Ç—Ä–∏—é –ª–∏–Ω–∏–∏
    new_coords = [*noise_geom.coords[:-1], (intersection.x, intersection.y),
                  (reflected_x, reflected_y)]

    # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —à—É–º–∞
    len_initial = LineString(new_coords[:-1]).length
    noise_level = noise['start_noise'] - (
                10 * log10((len_initial ** 2 + noise["level"] ** 2) ** 0.5)
    )
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    reflected_noise = noise.copy()
    reflected_noise['geometry'] = LineString(new_coords)

    # reflected_barrier = barrier.copy()
    # reflected_barrier['noise_level'] = noise_level
    # reflected_barrier['noise_height'] = noise["level"]
    # reflected_barrier['len_initial'] = len_initial
    print(f'______\n {noise_level} \n {noise["level"]}\n {len_initial}\n {noise['start_noise']}\n______ ')
    reflected_barrier = {
        'noise_level': noise_level,
        'noise_height': noise["level"],
        'len_initial': len_initial,
        **barrier.to_dict()
    }

    return reflected_noise, Series(reflected_barrier)